name: Build and Push Docker Images & Helm Chart
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[ci:true]') || github.event_name == 'workflow_dispatch'"
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      devops: ${{ steps.changes.outputs.devops }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '^devops/chart/'; then
            echo "devops=true" >> $GITHUB_OUTPUT
          else
            echo "devops=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD^ HEAD | grep -E '^backend/|^devops/Dockerfile.backend$'; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD^ HEAD | grep -E '^frontend/|^devops/Dockerfile.frontend$'; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    env:
      IMAGE_NAME: ashupednekar535/chartpaper
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend/
          file: devops/Dockerfile.backend
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.sha_short }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "âœ… Backend Docker Image: ${{ env.IMAGE_NAME }}:${{ env.sha_short }}"

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    env:
      IMAGE_NAME: ashupednekar535/chartpaper-ui
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: frontend/
          file: devops/Dockerfile.frontend
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.sha_short }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "âœ… Frontend Docker Image: ${{ env.IMAGE_NAME }}:${{ env.sha_short }}"

  package-helm:
    runs-on: ubuntu-latest
    #needs: [detect-changes, build-backend, build-frontend]
    needs: []
    if: true
    # if: |
    #   always() &&
    #   (needs.detect-changes.outputs.devops == 'true' ||
    #   (!contains(needs.*.result, 'failure') &&
    #   !contains(needs.*.result, 'cancelled') &&
    #   (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true')))
    env:
      GHCR_CHART_REPO: ghcr.io/charts
      CHART_PATH: devops/chart
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract short SHA
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Update image tags in values.yaml
        run: |
          if [ "${{ needs.detect-changes.outputs.backend }}" == "true" ]; then
            yq -i ".server.image.tag = \"${{ env.sha_short }}\"" ${{ env.CHART_PATH }}/values.yaml
            echo "âœ… Updated server.image.tag to ${{ env.sha_short }} in values.yaml"
          fi
          
          if [ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]; then
            yq -i ".ui.image.tag = \"${{ env.sha_short }}\"" ${{ env.CHART_PATH }}/values.yaml
            echo "âœ… Updated ui.image.tag to ${{ env.sha_short }} in values.yaml"
          fi

      - name: Bump Helm chart version (patch)
        run: |
          current_version=$(yq '.version' ${{ env.CHART_PATH }}/Chart.yaml)
          new_version=$(echo $current_version | awk -F. -v OFS=. '{$NF += 1 ; print}')
          yq -i ".version = \"$new_version\"" ${{ env.CHART_PATH }}/Chart.yaml
          echo "Chart version bumped: $current_version â†’ $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.CHART_PATH }}/Chart.yaml ${{ env.CHART_PATH }}/values.yaml
          git commit -m "chore: bump chart version to ${{ env.new_version }} and update image tag(s)"
          git push

      - name: Helm registry login
        run: echo ${{ secrets.GHCR_PAT }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Package Helm chart
        run: |
          helm package ${{ env.CHART_PATH }} --destination ./

      - name: Push Helm chart to GHCR
        run: |
          chart_file=$(ls *.tgz)
          echo "pushing ${chart_file}"
          helm push "$chart_file" oci://ghcr.io/ashupednekar/charts

      - name: Summary
        run: |
          echo "## ðŸ“¦ Build Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.detect-changes.outputs.backend }}" == "true" ]; then
            echo "âœ… Backend Docker Image: ${{ env.BACKEND_IMAGE }}:${{ env.sha_short }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]; then
            echo "âœ… Frontend Docker Image: ${{ env.FRONTEND_IMAGE }}:${{ env.sha_short }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "âœ… Helm Chart version: ${{ env.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Helm Chart pushed to: oci://${{ env.GHCR_CHART_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Changes committed and pushed to repository" >> $GITHUB_STEP_SUMMARY

